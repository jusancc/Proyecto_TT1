<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="elements_8cpp" kind="file" language="C++">
    <compoundname>elements.cpp</compoundname>
    <includes refid="elements_8hpp" local="yes">../include/elements.hpp</includes>
    <incdepgraph>
      <node id="8">
        <label>../include/SAT_Const.hpp</label>
        <link refid="_s_a_t___const_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../include/elements.hpp</label>
        <link refid="elements_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>../include/matrix.hpp</label>
        <link refid="matrix_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/elements.cpp</label>
        <link refid="elements_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>cstdio</label>
      </node>
      <node id="5">
        <label>cstdlib</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="9">
        <label>tuple</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="elements_8cpp_1a5dd6d5680c9b5aafae7e21082e0ab75a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>tuple&lt; double, double, double, double, double, double, double &gt;</type>
        <definition>tuple&lt; double, double, double, double, double, double, double &gt; elements</definition>
        <argsstring>(Matrix &amp;y)</argsstring>
        <name>elements</name>
        <param>
          <type><ref refid="class_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Calcula los elementos orbitales keplerianos a partir del vector de estado. </para>
        </briefdescription>
        <detaileddescription>
<para>Esta función toma como entrada un vector de estado compuesto por posición y velocidad y devuelve una tupla con los elementos keplerianos: semilatus rectum, semi-eje mayor, excentricidad, inclinación, longitud del nodo ascendente, argumento del periastro y anomalía media.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector de estado (6x1): posición (x,y,z) y velocidad (vx,vy,vz) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tuple&lt;double, double, double, double, double, double, double&gt; con:<itemizedlist>
<listitem><para>p: semilatus rectum</para>
</listitem><listitem><para>a: semi-eje mayor</para>
</listitem><listitem><para>e: excentricidad</para>
</listitem><listitem><para>i: inclinación</para>
</listitem><listitem><para>Omega: longitud del nodo ascendente</para>
</listitem><listitem><para>omega: argumento del periastro</para>
</listitem><listitem><para>M: anomalía media </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/elements.cpp" line="42" column="7" bodyfile="src/elements.cpp" bodystart="42" bodyend="80"/>
        <references refid="class_matrix_1ac5e00d2720d9e6431f8998cb52668368" compoundref="matrix_8cpp" startline="411" endline="424">Matrix::dot</references>
        <references refid="class_matrix_1a837260f6358853bd4012a86107df466f" compoundref="matrix_8cpp" startline="541" endline="556">Matrix::extract_vector</references>
        <references refid="class_s_a_t___const_1aa561286ef1a10f479fee20edb32faa16" compoundref="_s_a_t___const_8hpp" startline="62">SAT_Const::GM_Earth</references>
        <references refid="class_matrix_1aa30b90656f5063a7eac84a8cc5607318" compoundref="matrix_8cpp" startline="398" endline="406">Matrix::norm</references>
        <references refid="class_s_a_t___const_1a7322cb29af30ac8df9f46c9dde418381" compoundref="_s_a_t___const_8hpp" startline="35">SAT_Const::pi</references>
        <references refid="matrix_8hpp_1acbd9778b697f9ad3da64ef53b850e2c9" compoundref="matrix_8cpp" startline="314" endline="324">transpose</references>
        <references refid="matrix_8hpp_1a2159e44b4d006a55939a41c761708fb8" compoundref="matrix_8cpp" startline="429" endline="439">v_cross</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Implementación de la función que calcula elementos orbitales keplerianos a partir del vector de estado (posición y velocidad). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//$Header$</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GMAT:<sp/>General<sp/>Mission<sp/>Analysis<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>**Legal**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>Juan<sp/>Sánchez<sp/>de<sp/>Corta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="elements_8hpp" kindref="compound">../include/elements.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>elements(Matrix&amp;<sp/>y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="elements_8hpp_1a5dd6d5680c9b5aafae7e21082e0ab75a" refkind="member"><highlight class="normal">tuple&lt;double,<sp/>double,<sp/>double,<sp/>double,<sp/>double,<sp/>double,<sp/>double&gt;<sp/><ref refid="elements_8cpp_1a5dd6d5680c9b5aafae7e21082e0ab75a" kindref="member">elements</ref>(<ref refid="class_matrix" kindref="compound">Matrix</ref>&amp;<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pi2<sp/>=<sp/>2.0<sp/>*<sp/><ref refid="class_s_a_t___const_1a7322cb29af30ac8df9f46c9dde418381" kindref="member">SAT_Const::pi</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>r<sp/>=<sp/><ref refid="matrix_8hpp_1acbd9778b697f9ad3da64ef53b850e2c9" kindref="member">transpose</ref>(y.<ref refid="class_matrix_1a837260f6358853bd4012a86107df466f" kindref="member">extract_vector</ref>(1,<sp/>3));<sp/></highlight><highlight class="comment">//<sp/>posición</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>v<sp/>=<sp/><ref refid="matrix_8hpp_1acbd9778b697f9ad3da64ef53b850e2c9" kindref="member">transpose</ref>(y.<ref refid="class_matrix_1a837260f6358853bd4012a86107df466f" kindref="member">extract_vector</ref>(4,<sp/>6));<sp/></highlight><highlight class="comment">//<sp/>velocidad</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_matrix" kindref="compound">Matrix</ref><sp/>h<sp/>=<sp/><ref refid="matrix_8hpp_1a2159e44b4d006a55939a41c761708fb8" kindref="member">v_cross</ref>(r,<sp/>v);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>momento<sp/>angular<sp/>específico</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>magh<sp/>=<sp/>h.<ref refid="class_matrix_1aa30b90656f5063a7eac84a8cc5607318" kindref="member">norm</ref>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>H<sp/>=<sp/>magh;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>(magh<sp/>*<sp/>magh)<sp/>/<sp/><ref refid="class_s_a_t___const_1aa561286ef1a10f479fee20edb32faa16" kindref="member">SAT_Const::GM_Earth</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Omega<sp/>=<sp/>atan2(h(1),<sp/>-h(2));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>longitud<sp/>nodo<sp/>ascendente</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>Omega<sp/>=<sp/>fmod(Omega<sp/>+<sp/>pi2,<sp/>pi2);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>atan2(sqrt(h(1)*h(1)<sp/>+<sp/>h(2)*h(2)),<sp/>h(3));<sp/><sp/></highlight><highlight class="comment">//<sp/>inclinación</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>atan2(r(3)<sp/>*<sp/>H,<sp/>-r(1)<sp/>*<sp/>h(2)<sp/>+<sp/>r(2)<sp/>*<sp/>h(1));<sp/></highlight><highlight class="comment">//<sp/>argumento<sp/>de<sp/>la<sp/>latitud</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>R<sp/>=<sp/>r.<ref refid="class_matrix_1aa30b90656f5063a7eac84a8cc5607318" kindref="member">norm</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>distancia</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>1.0<sp/>/<sp/>(2.0<sp/>/<sp/>R<sp/>-<sp/>v.<ref refid="class_matrix_1ac5e00d2720d9e6431f8998cb52668368" kindref="member">dot</ref>(v)<sp/>/<sp/><ref refid="class_s_a_t___const_1aa561286ef1a10f479fee20edb32faa16" kindref="member">SAT_Const::GM_Earth</ref>);<sp/></highlight><highlight class="comment">//<sp/>semi-eje<sp/>mayor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eCosE<sp/>=<sp/>1.0<sp/>-<sp/>R<sp/>/<sp/>a;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eSinE<sp/>=<sp/>r.<ref refid="class_matrix_1ac5e00d2720d9e6431f8998cb52668368" kindref="member">dot</ref>(v)<sp/>/<sp/>sqrt(<ref refid="class_s_a_t___const_1aa561286ef1a10f479fee20edb32faa16" kindref="member">SAT_Const::GM_Earth</ref><sp/>*<sp/>a);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e2<sp/>=<sp/>eCosE<sp/>*<sp/>eCosE<sp/>+<sp/>eSinE<sp/>*<sp/>eSinE;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>sqrt(e2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>excentricidad</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E<sp/>=<sp/>atan2(eSinE,<sp/>eCosE);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>anomalía<sp/>excéntrica</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M<sp/>=<sp/>fmod(E<sp/>-<sp/>eSinE<sp/>+<sp/>pi2,<sp/>pi2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>anomalía<sp/>media</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nu<sp/>=<sp/>atan2(sqrt(1.0<sp/>-<sp/>e2)<sp/>*<sp/>eSinE,<sp/>eCosE<sp/>-<sp/>e2);<sp/></highlight><highlight class="comment">//<sp/>anomalía<sp/>verdadera</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>omega<sp/>=<sp/>fmod(u<sp/>-<sp/>nu<sp/>+<sp/>pi2,<sp/>pi2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>argumento<sp/>del<sp/>periastro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_tuple(p,<sp/>a,<sp/>e,<sp/>i,<sp/>Omega,<sp/>omega,<sp/>M);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/elements.cpp"/>
  </compounddef>
</doxygen>
